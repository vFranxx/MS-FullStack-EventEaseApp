@page "/registerEvent"

@using EventEaseApp.Data
@using EventEaseApp.Services

@inject NavigationManager NavigationManager
@inject IEventService EventService

<h1 class="mb-3">RegisterEvent</h1>

<EditForm Model="evnt" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Event Name</label>
        <InputText class="form-control" @bind-Value="evnt.Title" />
    </div>
    <div class="mb-3">
        <label class="form-label">Event Date</label>
        <InputDate class="form-control" @bind-Value="evnt.Date" />
    </div>
    <div class="mb-3">
        <label class="form-label">Event Location</label>
        <InputText class="form-control" @bind-Value="evnt.Location" />
    </div>
    <div class="mb-3">
        <label class="form-label">Event Description</label>
        <InputTextArea class="form-control" @bind-Value="evnt.Description" />
    </div>
    <button type="submit" class="mb-2 btn btn-primary">Register Event</button>
</EditForm>

@if (isSuccess)
{
    <div class="alert alert-success" role="alert">
        ¡Evento registrado exitosamente!
    </div>
}

@code {
    private Event evnt = new(); 
    private bool isSuccess = false;

    private async Task HandleValidSubmit()
    {
        await EventService.AddEventAsync(evnt);
        
        isSuccess = true;
        await Task.Delay(3000); // Simulate a delay for user feedback
        
        NavigationManager.NavigateTo("/events");
    }
}
