@page "/"

@using EventEaseApp.Components.Users
@using EventEaseApp.Data
@using EventEaseApp.Services
@using EventEaseApp.Viewmodels

@inject IUserService UserService

@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Welcome to EventEase!</h1>
@if (UserService.IsAuthenticated)
{
    <p>Hello, @UserService.CurrentUser?.Name! You are logged in.</p>
}
else
{
    <p class="mb-5">
        You'll need yo login in order to access the features of EventEase.
    </p>
    <p>
        You already have an account? <a href="#" @onclick="ShowLoginForm">Login</a>.
        <br />
        Don't have an account? <a href="#" @onclick="ShowRegistrationForm">Register</a>.
    </p>
}

@if (showRegistrationSuccess)
{
    <div class="alert alert-success mt-3">
        Registration completed successfully! You can now login.
    </div>
}

@if (showLoginSuccess)
{
    <div class="alert alert-success mt-3">
        Login completed successfully!
    </div>
}

@if (RegistrationFormVisible)
{
    <RegisterComponent HandleValidSubmit="OnRegistration" />
}
else if (LoginFormVisible)
{
    <LoginComponent HandleValidSubmit="OnLogin" loginFailed="@loginFailed"/>
}

@code{
    private bool RegistrationFormVisible = false;
    private bool LoginFormVisible = false;
    private bool showRegistrationSuccess = false;
    private bool showLoginSuccess = false;

    protected override void OnInitialized()
    {
        UserService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }

    private async Task OnRegistration(User user)
    {
        var result = await UserService.Register(user);
        if (result)
        {
            showRegistrationSuccess = true;
            StateHasChanged();

            await Task.Delay(3000); 
            RegistrationFormVisible = false;
            showRegistrationSuccess = false;
        }
    }

    private bool loginFailed = false;

    private async Task OnLogin(LoginVM user)
    {
        var result = await UserService.Login(user.Email, user.Password);
        if (result)
        {
            showLoginSuccess = true;
            StateHasChanged();

            await Task.Delay(3000);
            LoginFormVisible = false;
            showLoginSuccess = false;
        }
        else
        {
            loginFailed = true;
        }
    }

    private void ShowRegistrationForm()
    {
        RegistrationFormVisible = true;
        LoginFormVisible = false;
        loginFailed = false; // Reset login failure state when showing registration form
    }

    private void ShowLoginForm()
    {
        LoginFormVisible = true;
        RegistrationFormVisible = false;
        loginFailed = false; // Reset login failure state when showing login form
    }
}
